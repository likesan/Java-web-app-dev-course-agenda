복습
	Thread 위주
		응답성이 좋아진다?
			입력을 하는 동안 카운트 다운도 가능하도록 만들어버림. 동시에 두가지 기능이 생기도록 한다? 어떤 기능을 넣던 다 적용이된다/?
		단점도 있음
			thread에 의해 수정되버린 경우, 값이 변해버릴 수 있음
				허나 파훼법이 있다고 - **동기화** 기능? syncronized 기능?
	실시간 채팅 프로그램 살펴보기 
		while(true) 로 인해 그 하 단부, unreachable 코드가 생기는 경우 중간에 깨고 나갈 수 있는 조건을 짜주면 됨.
		scope 문제 해결법
			static
				남발 X 그러나 가장 심플
					static을 사용하기 위해선 public 으로 정보은닉도를 낮춰야함. 
				변수 선언만 == null 값 
			call by ref
				가장 귀찮, 지저분
				만들 틀래스 내에 생성자를 만든다
				생성자의 매개변수 값으로 변화를 주고자하는 인자를 설정한다.
				인자는 this를 통해 전달 받을 수 있게 한다?
			바깥에 클래스를 망둔다
			innerclass
				static class Main의 public int a 와 public static int b?
					Static이 Data 메모리에 형성하는 것과의 차이를 기억해놓자. 
						멤버필드로 해놓는다해도, Static안의 데이터가 DATA안에 형성되는 시점과는 차이가 생긴다. 그렇기에 int a 가 에러난다고.
					int a 는 해당 인스턴스를 불러와야만 가능. new? 
					static int b는 사용이 가능할까?
					int a 는 사용가능한가?
						nope, because the valiable a isnt made up yet. but static int b is already made up by the static declaration.
					사용 목적?
						Dis, Dos와 같은 지역 변수들과 같은 클래스(main에 위치해있게 되므로, 오류 없이 dis와 dos를 사용할 수 있게됨) 이것이 장점! **scope에러로 부터 벗어날 수 있다!**
					Thread를 main 바깥에 선언하는 것과의 차이점?
						매개변수가 main 같은 지역에 있기 때문에 scope에러가 나지 않음.
						게다가 Thread() 메서드를 굳이 이름을 붙여주지 않아도, 대괄호 끝나는 지점에 점만 찍고 .start()를 작성해도 사용할 수 있음!
					
				main 바깥으로 빼내기 안함
				Thread라는 클래스를 오버라이드-본래있던 Thread의 기능을 수정- 사용하려는 기능, 이렇게 만들어진 Thread 클래스는 이름이 없다고 부른다. 이름이 아직 붙여지지 않기 때문아닐까 그래서 우리는 이를 익명 이너클래스라고 부른다 
				사용 방법
					Thread th = new Thread() 라고 익명 이너클래스를 인스턴스화 시킨다. 다시말해 Thread라는 새로운 Thread 클래스를 수정해서 쓰려는 시도. 
						public void run(){}; 을 오버라이딩해서 쓰고자하는 목적이라고? 하기야 원래는 class 밖에서 이루어지는 녀석이라고 하니까?
				연습
					innerclass
					trywithresource
		Thread 안에 try/catch 위치 ( while true 안? 밖? )
			밖이 낫다? 왜?
			나중에 finally도 넣어줘야한다고.
		서버는 채팅에 참여하지 않는다?
시험
	gui는 안들어감, 그 전까지만
	내일 봄
프로젝트
	자기들이 만들고 싶은 부분들을 직접 그냥 배우고 만들어 해버렸음. 이런건 좋게 칭찬하시는 듯
	프로그램 버그가 찾아지지 않아 1등했다고
	그 안에 발표도 마무리 지어야할테고
		발표는 어떤식으로 진행되어야할까?
		발표를 망치지 않으려면 어떻게 진행되어야할까?
		발표라는게 사실 어려운게 전혀아니다. 그냥 내가 무얼 했는지 사람들에게 이해시켜주면 되는거니까.
		활발하게 뭔가 어떤 것들을 해나갔는지 설명해주면 되겠지.
		어떤식으로 설명을 해줘야할까?
			설명하는 이유는 뭐지?
			이해를 돕기 위해
			나는 어떻게 설명하지?
			이해를 도우려면 어떻게 설명해야하지?
				간결,
				시각적
				
			내가 완성하고자 했던 부분은 무엇이지?
				처음 개요에서 생각하길, 먼저 프로그램을 만들더라도 우리 주변에 가장 가까운 곳에 있는 니즈를 찾자고 생각했습니다.
				왜냐하면, 프로그램을 만드는 이유는 단연코 사람에게 도움을 주고자 함이었고, 가장 가까운 데서부터 시작하는 마음이 들었습니다.
				그래서 모두와 회의를 해서 아이디어를 보강했습니다.
				사실 처음에는 조원들이 영화를 좋아하기때문에, 영화 예매사이트를 만들까 했었습니다만, 
				강사님께 처음으로 아이디어들을 확인 받을 때, 프로그램 아이디어는 학생 도우미쪽이 더 좋다는 칭찬을 들을 수 있었습니다. 그래서 이것으로 결정했습니다. 
				그리고 우리에게 필요한 기능들을 고민했습니다.
				질문을 하는 것에 좀 부담을 느낀 학생들을 고민했씁니다.
					왜 부담을 느낄까?
					질문을 하려면 일단 먼저 스스로 뭘 모르고 있는지 파악하는게 중요한데 
				본래는 차트, 질문, 화면 캡쳐 정도해나가고, 게시판을 추가하며 질문들을 담아올리는 기능을 추가하자 했습니다만, 하다보니 생각보다 시간이 많이 소모되었습니다.
				나의 꿈....
				아름다운 곳에서 편안히, 그리고 조용히, 인터넷을 해나가며 살아가고 싶어 아주 조용하게 말이지. 행복할 것 같다. 세상의 시끄러움에서 사라진채로 말이지..
		일단 애들이 자기가 한 부분들을 설명해나갈 수 있게 만들어야하지 않나?
		음.. 일단 큰 뼈대만 만들어보고 이어가야겠지?
		그러면 내일 그 모든 것들을 위해서 내가 해야할 것들은 무엇일까? 각자가 6일동안 만들어낸 프로그램들을 이제서야 이어붙인다.
		하지만 그 로켓펀치 부분도 넣고 싶은데... 그정도는 해줘야 뭔가 도움이 된다고 이야기할 수 있지 않을까?
			로켓펀치..
			
		이제 시작해봐도 되겠지??
		흠...
		디자인은?
			우리가 주고자하는 감은, 푸른색이다. 푸른색으로 신뢰감이가게 느낌을 주고 싶기는 한데... 음 차라리 그냥 님버스 흰색으로 계쏙 진행해도 괜찮을 것 같고
			왜냐면 이것 저것 다 넣기 귀찮거든 귀찮다기보다는 별로 중요한 부분이 아니야. 중요하게 집중해야할 부분은... 기능이지 기능.
	라이센스?
		조사 없이 마구 쓰면?
			유료인지 무료인지 어떤 라이브러리인지 명시하는
		미니 프로젝트 해놓은 자료들을 받아서 정리를 깔끔하게 해놓자
			어디에 내놓아서 창피하지 않을 모습으로 해놓자.
GUI(Graphic User Interface)
	여기서 흥미를 찾기도 함
	나중에 DATABASE에서 흥미를 찾기도 한다고!..
	잘하던 사람들이 헤매기도 하다고..?
	이 전까지 했던건 CLI ( Command Line Interface)
	GL (Graphic Libabry) : 선배 개발자들이 만들어놓은 그래픽 모음 라이브러리들. 덕분에 우리가 쉽게 그래픽 구현이 가능
	단계
		AWT(Abstract Window Toolkit : 그래픽 라이브러리가 96년도 후반 쯤에 나온, GL의 최초 모델들)
			이걸로 자바 개발자들도 그래픽 구현들이 가능해짐
			자바뿐만 아니라... 다른 프로그램 언어들의 그래픽이 다 똑같다고?
				마이크로소프트사 때문, **마이크로소프트 윈도우에서 제공해놓은 리소스**로 만들었기 때문에, **구현된 그래픽**이 다 비슷하다고...
				다시말해 AWT 는 마이크로소프트 윈도우에서 제공되는 리소스들이라고
				자바는 단지 AWT를 자바에서 쓸 수 있는 코드로 바꿔놓기만 했을 뿐, (호환을 위해)
		SWING ( 두번째 그래픽 라이브러리 )
			JAVA에서, AWT가 너무 구리니, 더 예쁘게 꾸밀 수 있는 기능 탑재됨.
			탄생 이래로 가장 많이 쓰이는 그래픽
			2D로만 기능 - 3D 기능이 풀리던 시점에서 위기를 맞게됨 - 3차 그래픽 라이브러리가 나오게 되는 계기
			쓰려면? 알아야할 것 3가지
				Component
					구성요소 너무 많음
						frame
						combo box(=dropdown list)
						button
						input field
						Customized menu
						Tree
						scroll bar
						split pen
						etc. etc.
					필요하면 찾아서 써야할 줄 알아야
					소속을 시키는 component와 소속 당하는 component가 있음
						**포함 하는 쪽** = container , 이를테면
							frame
								가장 평범한 네모 박스 ![Pasted image](https://dynalist.io/u/7U5yD6R2gpmtt0BWVmKhk7Lf) 
								프로그램 본체를 만들때는 많이 씀
								frame을 띄우면 밑에 작업 표시줄에 창이 뜬다. 활성화 된다. ![Pasted image](https://dynalist.io/u/HZuQ6W5fJoo1NUJHEnEQi1rj) 
								아예 작업 창에 띄우고 싶은 경우, 옵션창-주로 dialog로 만들어놓는 것-들을 Frame으로 만들어놓기도 한다 - 왜? 작업 표시줄 창에 띄워놓고 싶어서
							dialog
								프로그램 내부의 옵션 창들
								작업 표시줄 창에 나타나지 않는다. Frame과 구분이 가능한 차이점.
								해당 옵션창이 사라지기 전까지는 프로그램 바깥 쪽의 것을 클릭하거나 할 수 없는 것도 가능 (=Modality 기능 "true")
							panel
								눈에 띄지 않음
								프로그램 내부의 레이아웃 구성을 지원하는 내부 컨테이너
									얘가 있어야 Layout 쓰리 매니저의 한계들을 모두 극복하고 원하는 곳에 레이아웃 설정 가능
									부분들을 만든 뒤, panel 에 집어 넣어 쓸 수 있게함
						**포함 당하는 쪽** = layout
							배치구조를 잡는 방식(GridLayout / FlowLayout / BorderLayout )
								**LayoutManager** <-> NullLayout
									개발자가 정할 수 있는 구조가 굉장히 제한적임.
									규칙을 갖고 있음
									사이즈와 위치가 다 정해져있음
									허나 1px 옮기는 걸 하기도 어렵다고.. 
									하지만 익숙해지고 나면 우리 마음대로 통제가 편하게 된다고?
									주로 큰 프로그램에 많이 쓰게 된다.
									this.setLayout(new GridLayout(3,2,100,10));
										 ![Pasted image](https://dynalist.io/u/tTyZGNp24v58XuFMzAAIM5Ma) 아무것도 설정하지 않으면 borderlayout
										this.add(component,BorderLayout.WEST); EAST, SOUTH, NORHT, CENTER로 만들 수 있음
										CENTER에 2번 한다해서 두번 다 만들어지는게 아니라, 두번째 만들어진 CENTER 위치의 COMPONENT가 그 위로 덮어씌워짐
									this.setLayout(new FlowLayout(Flowlayout.left);
										흐름을 정할 수 있음
										안의 component들이 딱 필요한 크기 만큼만 자동 값 저장이 된다.
									this.add(bt,BorderLayout.WEST);
										아무것도 설정하지 않으면, BorderLayout 자동으로 된다고? 왜지? 왜 그런지는 모르겠지만... WEST 와 EAST 등등.. 입력할 수 있는 것, JFrame으로 붙여버릴 수 있는 기능은 WEST / EAST / SOUTH / NORTH / CENTER 다. 
								NullLayout 방식
									위치와 크기 등 개발자가 수동적으로 일일히 다 정해놓는 것
										x/y 좌표 전부 다 설정하는 것
									대체로 크기가 작은 소프트웨어를 만들 때 많이 쓴다고... 아무래도 작업량이 적으니 그런게 아닐까
		JAVAFX ( 세번째 그래픽 라이브러리 )
			아주 강력하게 3D를 지원하는 라이브러리
			망해버림 
				너무 무거움(발적화, 성능 떨굼)
				자바서 책임을 지지도 않음
				코드가 자바에서 넘어왔지만 너무 많이 변해버림... SWING (두번째 그래픽 라이브러리)와 AWT(최초의 그래픽 라이브러리) 까지는 그저 코드 기능만 늘어졌지만, JAVAFX와서는 확 달라짐
					람다식? 자바 8버전? 함수 지향?
						멋지나 시기상조
				시대 착오적
					Native 어플리케이션에서는 굉장히 뛰어나나, 현재 시장들이 Web 어플리케이션으로 생겨나고 있는 시점. 
					그런데 이 JAVAFX는 Native 어플리케이션을 위한 그래픽 라이브러리라서 현재 시장에는 어울리지 않는다고 함. 그래서 망함
		실제로 한번 만들어보자
			import javax.swing.JFrame; // javax = java extends = 확장된 자바 라이브러리라는 뜻, J가 붙는 애들은 Swing/ 안붙는 애들은 AWT라고
			 ![Pasted image](https://dynalist.io/u/thSaZievPiztfoS7jb9EHJ_0) 
			public class Exam_gui extends JFrame{ // JFrame의 기능을 상속받도록 하자. 
				public Exam_gui() {    // 그 생성자 그자신은 다음과 같은 기능들은 갖는다.
				this.setSize(400,300);  
					왜 this를 정했나? Jframe에서 상속해왔으므로, 그 member field와 member method를 모조리 가져오는 기능임.
					그래서 this만 쓰면 다시 그 기능들을 또 내 것처럼 쓸 수 있는 건가?
				this.setLocationRelativeTo(null); // 창 사이즈 모니터 중앙에 오게 만듬
					매개변수 값 안에 null이 들어와야 모니터 정 중앙에 들어가게 한다고.
				this.setDefaultCloseOperation(EXIT_ON_CLOSE); 
					//닫아주는 상황, 본래는 JFrame을 해야하지만 이미 모조리 상속받아 있으므로 기능을 꺼내서만 쓴다면 가져올 수 있으므로, 
				this.setVisible(true);    // 창을 보이게 만들어주자 -- 매개변수가 boolean 이므로 true 상태여야 볼 수 있게 만든다는 뜻, 매개변수를 잘 파악하자
				}
				public static void main(String[] args) {
		new Exam_gui(); // 생성자 생성,
패쓰워드(에코 케릭터) 필드 ![Pasted image](https://dynalist.io/u/8uyTJhcFUCQWIdhdjrStBm66) 

얘네는 기본이므로 아예 외워 두는 것이 좋다. ![Pasted image](https://dynalist.io/u/6Hgx6Q8CPQMvVGTNLsQY2XE_) 
